function [methodinfo,structs,enuminfo,ThunkLibName]=mHeader
%MHEADER Create structures to define interfaces found in 'phidget21Matlab_Windows_x64'.

%This function was generated by loadlibrary.m parser version  on Mon Mar  2 18:22:16 2015
%perl options:'phidget21Matlab_Windows_x64.i -outfile=mHeader.m -thunkfile=phidget21_thunk_pcwin64.c -header=phidget21Matlab_Windows_x64.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'phidget21_thunk_pcwin64');
% int CPhidget_open ( CPhidgetHandle phid , int serialNumber ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidget_open'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidget_openLabel ( CPhidgetHandle phid , const char * label ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='CPhidget_openLabel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring'};fcnNum=fcnNum+1;
% int CPhidget_close ( CPhidgetHandle phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidget_close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidget_delete ( CPhidgetHandle phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidget_delete'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidget_getDeviceName ( CPhidgetHandle phid , const char ** deviceName ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidget_getDeviceName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% int CPhidget_getSerialNumber ( CPhidgetHandle phid , int * serialNumber ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidget_getSerialNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidget_getDeviceVersion ( CPhidgetHandle phid , int * deviceVersion ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidget_getDeviceVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidget_getDeviceStatus ( CPhidgetHandle phid , int * deviceStatus ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidget_getDeviceStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidget_getLibraryVersion ( const char ** libraryVersion ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidget_getLibraryVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'stringPtrPtr'};fcnNum=fcnNum+1;
% int CPhidget_getDeviceType ( CPhidgetHandle phid , const char ** deviceType ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidget_getDeviceType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% int CPhidget_getDeviceLabel ( CPhidgetHandle phid , const char ** deviceLabel ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidget_getDeviceLabel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% int CPhidget_setDeviceLabel ( CPhidgetHandle phid , const char * deviceLabel ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='CPhidget_setDeviceLabel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring'};fcnNum=fcnNum+1;
% int CPhidget_getErrorDescription ( int errorCode , const char ** errorString ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CPhidget_getErrorDescription'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'stringPtrPtr'};fcnNum=fcnNum+1;
% int CPhidget_waitForAttachment ( CPhidgetHandle phid , int milliseconds ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidget_waitForAttachment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidget_getServerID ( CPhidgetHandle phid , const char ** serverID ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidget_getServerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% int CPhidget_getServerAddress ( CPhidgetHandle phid , const char ** address , int * port ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidget_getServerAddress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'stringPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidget_getServerStatus ( CPhidgetHandle phid , int * serverStatus ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidget_getServerStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidget_getDeviceID ( CPhidgetHandle phid , CPhidget_DeviceID * deviceID ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidget_getDeviceID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'CPhidget_DeviceIDPtr'};fcnNum=fcnNum+1;
% int CPhidget_getDeviceClass ( CPhidgetHandle phid , CPhidget_DeviceClass * deviceClass ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidget_getDeviceClass'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'CPhidget_DeviceClassPtr'};fcnNum=fcnNum+1;
% int CPhidgetDictionary_create ( CPhidgetDictionaryHandle * dict ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetDictionary_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetDictionary_close ( CPhidgetDictionaryHandle dict ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetDictionary_close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetDictionary_delete ( CPhidgetDictionaryHandle dict ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetDictionary_delete'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetDictionary_addKey ( CPhidgetDictionaryHandle dict , const char * key , const char * value , int persistent ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringint32Thunk';fcns.name{fcnNum}='CPhidgetDictionary_addKey'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetDictionary_removeKey ( CPhidgetDictionaryHandle dict , const char * pattern ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='CPhidgetDictionary_removeKey'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring'};fcnNum=fcnNum+1;
% int CPhidgetDictionary_set_OnKeyChange_Handler ( CPhidgetDictionaryHandle dict , CPhidgetDictionaryListenerHandle * dictlistener , const char * pattern , CPhidgetDictionary_OnKeyChange_Function fptr , void * userPtr ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetDictionary_set_OnKeyChange_Handler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32PtrPtr', 'cstring', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int CPhidgetDictionary_remove_OnKeyChange_Handler ( CPhidgetDictionaryListenerHandle dictlistener ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetDictionary_remove_OnKeyChange_Handler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetDictionary_getKey ( CPhidgetDictionaryHandle dict , const char * key , char * value , int valuelen ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringint32Thunk';fcns.name{fcnNum}='CPhidgetDictionary_getKey'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetDictionary_getServerID ( CPhidgetDictionaryHandle dict , const char ** serverID ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetDictionary_getServerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetDictionary_getServerAddress ( CPhidgetDictionaryHandle dict , const char ** address , int * port ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetDictionary_getServerAddress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'stringPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetDictionary_getServerStatus ( CPhidgetDictionaryHandle dict , int * serverStatus ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetDictionary_getServerStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetManager_create ( CPhidgetManagerHandle * phidm ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetManager_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetManager_open ( CPhidgetManagerHandle phidm ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetManager_open'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetManager_close ( CPhidgetManagerHandle phidm ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetManager_close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetManager_delete ( CPhidgetManagerHandle phidm ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetManager_delete'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetManager_getAttachedDevices ( CPhidgetManagerHandle phidm , CPhidgetHandle * phidArray [], int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetManager_getAttachedDevices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32PtrPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetManager_freeAttachedDevicesArray ( CPhidgetHandle phidArray []); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetManager_freeAttachedDevicesArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetManager_getServerID ( CPhidgetManagerHandle phidm , const char ** serverID ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetManager_getServerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetManager_getServerAddress ( CPhidgetManagerHandle phidm , const char ** address , int * port ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetManager_getServerAddress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'stringPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetManager_getServerStatus ( CPhidgetManagerHandle phidm , int * serverStatus ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetManager_getServerStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidget_openRemote ( CPhidgetHandle phid , int serial , const char * serverID , const char * password ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringcstringThunk';fcns.name{fcnNum}='CPhidget_openRemote'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int CPhidget_openLabelRemote ( CPhidgetHandle phid , const char * label , const char * serverID , const char * password ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringcstringThunk';fcns.name{fcnNum}='CPhidget_openLabelRemote'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int CPhidget_openRemoteIP ( CPhidgetHandle phid , int serial , const char * address , int port , const char * password ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringint32cstringThunk';fcns.name{fcnNum}='CPhidget_openRemoteIP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'cstring', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int CPhidget_openLabelRemoteIP ( CPhidgetHandle phid , const char * label , const char * address , int port , const char * password ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringint32cstringThunk';fcns.name{fcnNum}='CPhidget_openLabelRemoteIP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'cstring', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int CPhidgetManager_openRemote ( CPhidgetManagerHandle phidm , const char * serverID , const char * password ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringThunk';fcns.name{fcnNum}='CPhidgetManager_openRemote'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int CPhidgetManager_openRemoteIP ( CPhidgetManagerHandle phidm , const char * address , int port , const char * password ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32cstringThunk';fcns.name{fcnNum}='CPhidgetManager_openRemoteIP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int CPhidgetDictionary_openRemote ( CPhidgetDictionaryHandle dict , const char * serverID , const char * password ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringThunk';fcns.name{fcnNum}='CPhidgetDictionary_openRemote'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int CPhidgetDictionary_openRemoteIP ( CPhidgetDictionaryHandle dict , const char * address , int port , const char * password ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32cstringThunk';fcns.name{fcnNum}='CPhidgetDictionary_openRemoteIP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int CPhidget_enableLogging ( CPhidgetLog_level level , const char * outputFile ); 
fcns.thunkname{fcnNum}='int32CPhidgetLog_levelcstringThunk';fcns.name{fcnNum}='CPhidget_enableLogging'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'CPhidgetLog_level', 'cstring'};fcnNum=fcnNum+1;
% int CPhidget_disableLogging (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='CPhidget_disableLogging'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int CPhidget_log ( CPhidgetLog_level level , const char * id , const char * message , ...); 
fcns.name{fcnNum}='CPhidget_log'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'CPhidgetLog_level', 'cstring', 'cstring', 'error'};fcnNum=fcnNum+1;
% int CPhidgetAccelerometer_create ( CPhidgetAccelerometerHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAccelerometer_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetAccelerometer_getAxisCount ( CPhidgetAccelerometerHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetAccelerometer_getAxisCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetAccelerometer_getAcceleration ( CPhidgetAccelerometerHandle phid , int index , double * acceleration ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAccelerometer_getAcceleration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAccelerometer_getAccelerationMax ( CPhidgetAccelerometerHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAccelerometer_getAccelerationMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAccelerometer_getAccelerationMin ( CPhidgetAccelerometerHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAccelerometer_getAccelerationMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAccelerometer_getAccelerationChangeTrigger ( CPhidgetAccelerometerHandle phid , int index , double * trigger ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAccelerometer_getAccelerationChangeTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAccelerometer_setAccelerationChangeTrigger ( CPhidgetAccelerometerHandle phid , int index , double trigger ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetAccelerometer_setAccelerationChangeTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_create ( CPhidgetAdvancedServoHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getMotorCount ( CPhidgetAdvancedServoHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getMotorCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getAcceleration ( CPhidgetAdvancedServoHandle phid , int index , double * acceleration ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getAcceleration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_setAcceleration ( CPhidgetAdvancedServoHandle phid , int index , double acceleration ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_setAcceleration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getAccelerationMax ( CPhidgetAdvancedServoHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getAccelerationMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getAccelerationMin ( CPhidgetAdvancedServoHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getAccelerationMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getVelocityLimit ( CPhidgetAdvancedServoHandle phid , int index , double * limit ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getVelocityLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_setVelocityLimit ( CPhidgetAdvancedServoHandle phid , int index , double limit ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_setVelocityLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getVelocity ( CPhidgetAdvancedServoHandle phid , int index , double * velocity ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getVelocity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getVelocityMax ( CPhidgetAdvancedServoHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getVelocityMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getVelocityMin ( CPhidgetAdvancedServoHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getVelocityMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getPosition ( CPhidgetAdvancedServoHandle phid , int index , double * position ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_setPosition ( CPhidgetAdvancedServoHandle phid , int index , double position ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_setPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getPositionMax ( CPhidgetAdvancedServoHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getPositionMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_setPositionMax ( CPhidgetAdvancedServoHandle phid , int index , double max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_setPositionMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getPositionMin ( CPhidgetAdvancedServoHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getPositionMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_setPositionMin ( CPhidgetAdvancedServoHandle phid , int index , double min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_setPositionMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getCurrent ( CPhidgetAdvancedServoHandle phid , int index , double * current ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getSpeedRampingOn ( CPhidgetAdvancedServoHandle phid , int index , int * rampingState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getSpeedRampingOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_setSpeedRampingOn ( CPhidgetAdvancedServoHandle phid , int index , int rampingState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_setSpeedRampingOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getEngaged ( CPhidgetAdvancedServoHandle phid , int index , int * engagedState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getEngaged'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_setEngaged ( CPhidgetAdvancedServoHandle phid , int index , int engagedState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_setEngaged'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getStopped ( CPhidgetAdvancedServoHandle phid , int index , int * stoppedState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getStopped'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_getServoType ( CPhidgetAdvancedServoHandle phid , int index , CPhidget_ServoType * servoType ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_getServoType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'CPhidget_ServoTypePtr'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_setServoType ( CPhidgetAdvancedServoHandle phid , int index , CPhidget_ServoType servoType ); 
fcns.thunkname{fcnNum}='int32voidPtrint32CPhidget_ServoTypeThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_setServoType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'CPhidget_ServoType'};fcnNum=fcnNum+1;
% int CPhidgetAdvancedServo_setServoParameters ( CPhidgetAdvancedServoHandle phid , int index , double min_us , double max_us , double degrees , double velocity_max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubledoubledoubledoubleThunk';fcns.name{fcnNum}='CPhidgetAdvancedServo_setServoParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int CPhidgetAnalog_create ( CPhidgetAnalogHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAnalog_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetAnalog_getOutputCount ( CPhidgetAnalogHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetAnalog_getOutputCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetAnalog_getVoltage ( CPhidgetAnalogHandle phid , int index , double * voltage ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAnalog_getVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAnalog_setVoltage ( CPhidgetAnalogHandle phid , int index , double voltage ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetAnalog_setVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetAnalog_getVoltageMax ( CPhidgetAnalogHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAnalog_getVoltageMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAnalog_getVoltageMin ( CPhidgetAnalogHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAnalog_getVoltageMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetAnalog_setEnabled ( CPhidgetAnalogHandle phid , int index , int enabledState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetAnalog_setEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetAnalog_getEnabled ( CPhidgetAnalogHandle phid , int index , int * enabledState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetAnalog_getEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetBridge_create ( CPhidgetBridgeHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetBridge_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetBridge_getInputCount ( CPhidgetBridgeHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetBridge_getInputCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetBridge_getBridgeValue ( CPhidgetBridgeHandle phid , int index , double * value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetBridge_getBridgeValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetBridge_getBridgeMax ( CPhidgetBridgeHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetBridge_getBridgeMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetBridge_getBridgeMin ( CPhidgetBridgeHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetBridge_getBridgeMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetBridge_setEnabled ( CPhidgetBridgeHandle phid , int index , int enabledState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetBridge_setEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetBridge_getEnabled ( CPhidgetBridgeHandle phid , int index , int * enabledState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetBridge_getEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetBridge_getGain ( CPhidgetBridgeHandle phid , int index , CPhidgetBridge_Gain * gain ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetBridge_getGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'CPhidgetBridge_GainPtr'};fcnNum=fcnNum+1;
% int CPhidgetBridge_setGain ( CPhidgetBridgeHandle phid , int index , CPhidgetBridge_Gain gain ); 
fcns.thunkname{fcnNum}='int32voidPtrint32CPhidgetBridge_GainThunk';fcns.name{fcnNum}='CPhidgetBridge_setGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'CPhidgetBridge_Gain'};fcnNum=fcnNum+1;
% int CPhidgetBridge_getDataRate ( CPhidgetBridgeHandle phid , int * milliseconds ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetBridge_getDataRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetBridge_setDataRate ( CPhidgetBridgeHandle phid , int milliseconds ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetBridge_setDataRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetBridge_getDataRateMax ( CPhidgetBridgeHandle phid , int * max ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetBridge_getDataRateMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetBridge_getDataRateMin ( CPhidgetBridgeHandle phid , int * min ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetBridge_getDataRateMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetEncoder_create ( CPhidgetEncoderHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetEncoder_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetEncoder_getInputCount ( CPhidgetEncoderHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetEncoder_getInputCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetEncoder_getInputState ( CPhidgetEncoderHandle phid , int index , int * inputState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetEncoder_getInputState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetEncoder_getEncoderCount ( CPhidgetEncoderHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetEncoder_getEncoderCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetEncoder_getPosition ( CPhidgetEncoderHandle phid , int index , int * position ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetEncoder_getPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetEncoder_setPosition ( CPhidgetEncoderHandle phid , int index , int position ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetEncoder_setPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetEncoder_getIndexPosition ( CPhidgetEncoderHandle phid , int index , int * position ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetEncoder_getIndexPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetEncoder_getEnabled ( CPhidgetEncoderHandle phid , int index , int * enabledState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetEncoder_getEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetEncoder_setEnabled ( CPhidgetEncoderHandle phid , int index , int enabledState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetEncoder_setEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetFrequencyCounter_create ( CPhidgetFrequencyCounterHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetFrequencyCounter_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetFrequencyCounter_getFrequencyInputCount ( CPhidgetFrequencyCounterHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetFrequencyCounter_getFrequencyInputCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetFrequencyCounter_getFrequency ( CPhidgetFrequencyCounterHandle phid , int index , double * frequency ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetFrequencyCounter_getFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetFrequencyCounter_getTotalTime ( CPhidgetFrequencyCounterHandle phid , int index , __int64 * time ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetFrequencyCounter_getTotalTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int64Ptr'};fcnNum=fcnNum+1;
% int CPhidgetFrequencyCounter_getTotalCount ( CPhidgetFrequencyCounterHandle phid , int index , __int64 * count ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetFrequencyCounter_getTotalCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int64Ptr'};fcnNum=fcnNum+1;
% int CPhidgetFrequencyCounter_setTimeout ( CPhidgetFrequencyCounterHandle phid , int index , int timeout ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetFrequencyCounter_setTimeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetFrequencyCounter_getTimeout ( CPhidgetFrequencyCounterHandle phid , int index , int * timeout ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetFrequencyCounter_getTimeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetFrequencyCounter_setEnabled ( CPhidgetFrequencyCounterHandle phid , int index , int enabledState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetFrequencyCounter_setEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetFrequencyCounter_getEnabled ( CPhidgetFrequencyCounterHandle phid , int index , int * enabledState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetFrequencyCounter_getEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetFrequencyCounter_setFilter ( CPhidgetFrequencyCounterHandle phid , int index , CPhidgetFrequencyCounter_FilterType filter ); 
fcns.thunkname{fcnNum}='int32voidPtrint32CPhidgetFrequencyCounter_FilterTypeThunk';fcns.name{fcnNum}='CPhidgetFrequencyCounter_setFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'CPhidgetFrequencyCounter_FilterType'};fcnNum=fcnNum+1;
% int CPhidgetFrequencyCounter_getFilter ( CPhidgetFrequencyCounterHandle phid , int index , CPhidgetFrequencyCounter_FilterType * filter ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetFrequencyCounter_getFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'CPhidgetFrequencyCounter_FilterTypePtr'};fcnNum=fcnNum+1;
% int CPhidgetFrequencyCounter_reset ( CPhidgetFrequencyCounterHandle phid , int index ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetFrequencyCounter_reset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetGPS_create ( CPhidgetGPSHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetGPS_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetGPS_getLatitude ( CPhidgetGPSHandle phid , double * latitude ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetGPS_getLatitude'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetGPS_getLongitude ( CPhidgetGPSHandle phid , double * longitude ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetGPS_getLongitude'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetGPS_getAltitude ( CPhidgetGPSHandle phid , double * altitude ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetGPS_getAltitude'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetGPS_getHeading ( CPhidgetGPSHandle phid , double * heading ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetGPS_getHeading'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetGPS_getVelocity ( CPhidgetGPSHandle phid , double * velocity ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetGPS_getVelocity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetGPS_getTime ( CPhidgetGPSHandle phid , GPSTime * time ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetGPS_getTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% int CPhidgetGPS_getDate ( CPhidgetGPSHandle phid , GPSDate * date ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetGPS_getDate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% int CPhidgetGPS_getPositionFixStatus ( CPhidgetGPSHandle phid , int * fixStatus ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetGPS_getPositionFixStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetGPS_getNMEAData ( CPhidgetGPSHandle phid , NMEAData * data ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetGPS_getNMEAData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_create ( CPhidgetInterfaceKitHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_getInputCount ( CPhidgetInterfaceKitHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_getInputCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_getInputState ( CPhidgetInterfaceKitHandle phid , int index , int * inputState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_getInputState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_getOutputCount ( CPhidgetInterfaceKitHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_getOutputCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_getOutputState ( CPhidgetInterfaceKitHandle phid , int index , int * outputState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_getOutputState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_setOutputState ( CPhidgetInterfaceKitHandle phid , int index , int outputState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_setOutputState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_getSensorCount ( CPhidgetInterfaceKitHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_getSensorCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_getSensorValue ( CPhidgetInterfaceKitHandle phid , int index , int * sensorValue ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_getSensorValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_getSensorRawValue ( CPhidgetInterfaceKitHandle phid , int index , int * sensorRawValue ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_getSensorRawValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_getSensorChangeTrigger ( CPhidgetInterfaceKitHandle phid , int index , int * trigger ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_getSensorChangeTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_setSensorChangeTrigger ( CPhidgetInterfaceKitHandle phid , int index , int trigger ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_setSensorChangeTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_getRatiometric ( CPhidgetInterfaceKitHandle phid , int * ratiometric ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_getRatiometric'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_setRatiometric ( CPhidgetInterfaceKitHandle phid , int ratiometric ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_setRatiometric'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_getDataRate ( CPhidgetInterfaceKitHandle phid , int index , int * milliseconds ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_getDataRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_setDataRate ( CPhidgetInterfaceKitHandle phid , int index , int milliseconds ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_setDataRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_getDataRateMax ( CPhidgetInterfaceKitHandle phid , int index , int * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_getDataRateMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetInterfaceKit_getDataRateMin ( CPhidgetInterfaceKitHandle phid , int index , int * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetInterfaceKit_getDataRateMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetIR_create ( CPhidgetIRHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetIR_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetIR_Transmit ( CPhidgetIRHandle phid , unsigned char * data , CPhidgetIR_CodeInfoHandle codeInfo ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetIR_Transmit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'uint8Ptr', 's_CPhidgetIR_CodeInfoPtr'};fcnNum=fcnNum+1;
% int CPhidgetIR_TransmitRepeat ( CPhidgetIRHandle phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetIR_TransmitRepeat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetIR_TransmitRaw ( CPhidgetIRHandle phid , int * data , int length , int carrierFrequency , int dutyCycle , int gap ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32int32int32Thunk';fcns.name{fcnNum}='CPhidgetIR_TransmitRaw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetIR_getRawData ( CPhidgetIRHandle phid , int * data , int * dataLength ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetIR_getRawData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetIR_getLastCode ( CPhidgetIRHandle phid , unsigned char * data , int * dataLength , int * bitCount ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetIR_getLastCode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'uint8Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetIR_getLastLearnedCode ( CPhidgetIRHandle phid , unsigned char * data , int * dataLength , CPhidgetIR_CodeInfo * codeInfo ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetIR_getLastLearnedCode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'uint8Ptr', 'int32Ptr', 's_CPhidgetIR_CodeInfoPtr'};fcnNum=fcnNum+1;
% int CPhidgetLED_create ( CPhidgetLEDHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetLED_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetLED_getLEDCount ( CPhidgetLEDHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetLED_getLEDCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetLED_getCurrentLimit ( CPhidgetLEDHandle phid , CPhidgetLED_CurrentLimit * currentLimit ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetLED_getCurrentLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'CPhidgetLED_CurrentLimitPtr'};fcnNum=fcnNum+1;
% int CPhidgetLED_setCurrentLimit ( CPhidgetLEDHandle phid , CPhidgetLED_CurrentLimit currentLimit ); 
fcns.thunkname{fcnNum}='int32voidPtrCPhidgetLED_CurrentLimitThunk';fcns.name{fcnNum}='CPhidgetLED_setCurrentLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'CPhidgetLED_CurrentLimit'};fcnNum=fcnNum+1;
% int CPhidgetLED_getVoltage ( CPhidgetLEDHandle phid , CPhidgetLED_Voltage * voltage ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetLED_getVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'CPhidgetLED_VoltagePtr'};fcnNum=fcnNum+1;
% int CPhidgetLED_setVoltage ( CPhidgetLEDHandle phid , CPhidgetLED_Voltage voltage ); 
fcns.thunkname{fcnNum}='int32voidPtrCPhidgetLED_VoltageThunk';fcns.name{fcnNum}='CPhidgetLED_setVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'CPhidgetLED_Voltage'};fcnNum=fcnNum+1;
% int CPhidgetLED_getBrightness ( CPhidgetLEDHandle phid , int index , double * brightness ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetLED_getBrightness'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetLED_setBrightness ( CPhidgetLEDHandle phid , int index , double brightness ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetLED_setBrightness'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetLED_getCurrentLimitIndexed ( CPhidgetLEDHandle phid , int index , double * limit ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetLED_getCurrentLimitIndexed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetLED_setCurrentLimitIndexed ( CPhidgetLEDHandle phid , int index , double limit ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetLED_setCurrentLimitIndexed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_create ( CPhidgetMotorControlHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getMotorCount ( CPhidgetMotorControlHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getMotorCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getVelocity ( CPhidgetMotorControlHandle phid , int index , double * velocity ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getVelocity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_setVelocity ( CPhidgetMotorControlHandle phid , int index , double velocity ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetMotorControl_setVelocity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getAcceleration ( CPhidgetMotorControlHandle phid , int index , double * acceleration ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getAcceleration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_setAcceleration ( CPhidgetMotorControlHandle phid , int index , double acceleration ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetMotorControl_setAcceleration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getAccelerationMax ( CPhidgetMotorControlHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getAccelerationMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getAccelerationMin ( CPhidgetMotorControlHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getAccelerationMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getCurrent ( CPhidgetMotorControlHandle phid , int index , double * current ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getInputCount ( CPhidgetMotorControlHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getInputCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getInputState ( CPhidgetMotorControlHandle phid , int index , int * inputState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getInputState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getEncoderCount ( CPhidgetMotorControlHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getEncoderCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getEncoderPosition ( CPhidgetMotorControlHandle phid , int index , int * position ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getEncoderPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_setEncoderPosition ( CPhidgetMotorControlHandle phid , int index , int position ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetMotorControl_setEncoderPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getBackEMFSensingState ( CPhidgetMotorControlHandle phid , int index , int * bEMFState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getBackEMFSensingState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_setBackEMFSensingState ( CPhidgetMotorControlHandle phid , int index , int bEMFState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetMotorControl_setBackEMFSensingState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getBackEMF ( CPhidgetMotorControlHandle phid , int index , double * voltage ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getBackEMF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getSupplyVoltage ( CPhidgetMotorControlHandle phid , double * supplyVoltage ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getSupplyVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getBraking ( CPhidgetMotorControlHandle phid , int index , double * braking ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getBraking'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_setBraking ( CPhidgetMotorControlHandle phid , int index , double braking ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetMotorControl_setBraking'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getSensorCount ( CPhidgetMotorControlHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getSensorCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getSensorValue ( CPhidgetMotorControlHandle phid , int index , int * sensorValue ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getSensorValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getSensorRawValue ( CPhidgetMotorControlHandle phid , int index , int * sensorRawValue ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getSensorRawValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_getRatiometric ( CPhidgetMotorControlHandle phid , int * ratiometric ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetMotorControl_getRatiometric'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetMotorControl_setRatiometric ( CPhidgetMotorControlHandle phid , int ratiometric ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetMotorControl_setRatiometric'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetPHSensor_create ( CPhidgetPHSensorHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetPHSensor_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetPHSensor_getPH ( CPhidgetPHSensorHandle phid , double * ph ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetPHSensor_getPH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetPHSensor_getPHMax ( CPhidgetPHSensorHandle phid , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetPHSensor_getPHMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetPHSensor_getPHMin ( CPhidgetPHSensorHandle phid , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetPHSensor_getPHMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetPHSensor_getPHChangeTrigger ( CPhidgetPHSensorHandle phid , double * trigger ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetPHSensor_getPHChangeTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetPHSensor_setPHChangeTrigger ( CPhidgetPHSensorHandle phid , double trigger ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='CPhidgetPHSensor_setPHChangeTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'double'};fcnNum=fcnNum+1;
% int CPhidgetPHSensor_getPotential ( CPhidgetPHSensorHandle phid , double * potential ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetPHSensor_getPotential'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetPHSensor_getPotentialMax ( CPhidgetPHSensorHandle phid , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetPHSensor_getPotentialMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetPHSensor_getPotentialMin ( CPhidgetPHSensorHandle phid , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetPHSensor_getPotentialMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetPHSensor_setTemperature ( CPhidgetPHSensorHandle phid , double temperature ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='CPhidgetPHSensor_setTemperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'double'};fcnNum=fcnNum+1;
% int CPhidgetRFID_create ( CPhidgetRFIDHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetRFID_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetRFID_getOutputCount ( CPhidgetRFIDHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetRFID_getOutputCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetRFID_getOutputState ( CPhidgetRFIDHandle phid , int index , int * outputState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetRFID_getOutputState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetRFID_setOutputState ( CPhidgetRFIDHandle phid , int index , int outputState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetRFID_setOutputState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetRFID_getAntennaOn ( CPhidgetRFIDHandle phid , int * antennaState ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetRFID_getAntennaOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetRFID_setAntennaOn ( CPhidgetRFIDHandle phid , int antennaState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetRFID_setAntennaOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetRFID_getLEDOn ( CPhidgetRFIDHandle phid , int * LEDState ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetRFID_getLEDOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetRFID_setLEDOn ( CPhidgetRFIDHandle phid , int LEDState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetRFID_setLEDOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetRFID_getLastTag2 ( CPhidgetRFIDHandle phid , char ** tagString , CPhidgetRFID_Protocol * protocol ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetRFID_getLastTag2'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'stringPtrPtr', 'CPhidgetRFID_ProtocolPtr'};fcnNum=fcnNum+1;
% int CPhidgetRFID_getTagStatus ( CPhidgetRFIDHandle phid , int * status ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetRFID_getTagStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetRFID_write ( CPhidgetRFIDHandle phid , char * tagString , CPhidgetRFID_Protocol protocol , int lock ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringCPhidgetRFID_Protocolint32Thunk';fcns.name{fcnNum}='CPhidgetRFID_write'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'CPhidgetRFID_Protocol', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetServo_create ( CPhidgetServoHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetServo_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetServo_getMotorCount ( CPhidgetServoHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetServo_getMotorCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetServo_getPosition ( CPhidgetServoHandle phid , int index , double * position ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetServo_getPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetServo_setPosition ( CPhidgetServoHandle phid , int index , double position ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetServo_setPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetServo_getPositionMax ( CPhidgetServoHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetServo_getPositionMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetServo_getPositionMin ( CPhidgetServoHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetServo_getPositionMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetServo_getEngaged ( CPhidgetServoHandle phid , int index , int * engagedState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetServo_getEngaged'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetServo_setEngaged ( CPhidgetServoHandle phid , int index , int engagedState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetServo_setEngaged'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetServo_getServoType ( CPhidgetServoHandle phid , int index , CPhidget_ServoType * servoType ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetServo_getServoType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'CPhidget_ServoTypePtr'};fcnNum=fcnNum+1;
% int CPhidgetServo_setServoType ( CPhidgetServoHandle phid , int index , CPhidget_ServoType servoType ); 
fcns.thunkname{fcnNum}='int32voidPtrint32CPhidget_ServoTypeThunk';fcns.name{fcnNum}='CPhidgetServo_setServoType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'CPhidget_ServoType'};fcnNum=fcnNum+1;
% int CPhidgetServo_setServoParameters ( CPhidgetServoHandle phid , int index , double min_us , double max_us , double degrees ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubledoubledoubleThunk';fcns.name{fcnNum}='CPhidgetServo_setServoParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_create ( CPhidgetSpatialHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getAccelerationAxisCount ( CPhidgetSpatialHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getAccelerationAxisCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getGyroAxisCount ( CPhidgetSpatialHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getGyroAxisCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getCompassAxisCount ( CPhidgetSpatialHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getCompassAxisCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getAcceleration ( CPhidgetSpatialHandle phid , int index , double * acceleration ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getAcceleration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getAccelerationMax ( CPhidgetSpatialHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getAccelerationMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getAccelerationMin ( CPhidgetSpatialHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getAccelerationMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getAngularRate ( CPhidgetSpatialHandle phid , int index , double * angularRate ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getAngularRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getAngularRateMax ( CPhidgetSpatialHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getAngularRateMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getAngularRateMin ( CPhidgetSpatialHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getAngularRateMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getMagneticField ( CPhidgetSpatialHandle phid , int index , double * magneticField ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getMagneticField'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getMagneticFieldMax ( CPhidgetSpatialHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getMagneticFieldMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getMagneticFieldMin ( CPhidgetSpatialHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getMagneticFieldMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_zeroGyro ( CPhidgetSpatialHandle phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_zeroGyro'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getDataRate ( CPhidgetSpatialHandle phid , int * milliseconds ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getDataRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_setDataRate ( CPhidgetSpatialHandle phid , int milliseconds ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetSpatial_setDataRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getDataRateMax ( CPhidgetSpatialHandle phid , int * max ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getDataRateMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_getDataRateMin ( CPhidgetSpatialHandle phid , int * min ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_getDataRateMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_setCompassCorrectionParameters ( CPhidgetSpatialHandle phid , double magField , double offset0 , double offset1 , double offset2 , double gain0 , double gain1 , double gain2 , double T0 , double T1 , double T2 , double T3 , double T4 , double T5 ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubledoubledoubledoubledoubledoubledoubledoubledoubledoubledoubledoubledoubleThunk';fcns.name{fcnNum}='CPhidgetSpatial_setCompassCorrectionParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'double', 'double', 'double', 'double', 'double', 'double', 'double', 'double', 'double', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int CPhidgetSpatial_resetCompassCorrectionParameters ( CPhidgetSpatialHandle phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetSpatial_resetCompassCorrectionParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_create ( CPhidgetStepperHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getInputCount ( CPhidgetStepperHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getInputCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getInputState ( CPhidgetStepperHandle phid , int index , int * inputState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getInputState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getMotorCount ( CPhidgetStepperHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getMotorCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getAcceleration ( CPhidgetStepperHandle phid , int index , double * acceleration ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getAcceleration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_setAcceleration ( CPhidgetStepperHandle phid , int index , double acceleration ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetStepper_setAcceleration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getAccelerationMax ( CPhidgetStepperHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getAccelerationMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getAccelerationMin ( CPhidgetStepperHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getAccelerationMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getVelocityLimit ( CPhidgetStepperHandle phid , int index , double * limit ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getVelocityLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_setVelocityLimit ( CPhidgetStepperHandle phid , int index , double limit ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetStepper_setVelocityLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getVelocity ( CPhidgetStepperHandle phid , int index , double * velocity ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getVelocity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getVelocityMax ( CPhidgetStepperHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getVelocityMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getVelocityMin ( CPhidgetStepperHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getVelocityMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getTargetPosition ( CPhidgetStepperHandle phid , int index , __int64 * position ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getTargetPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int64Ptr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_setTargetPosition ( CPhidgetStepperHandle phid , int index , __int64 position ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int64Thunk';fcns.name{fcnNum}='CPhidgetStepper_setTargetPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int64'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getCurrentPosition ( CPhidgetStepperHandle phid , int index , __int64 * position ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getCurrentPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int64Ptr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_setCurrentPosition ( CPhidgetStepperHandle phid , int index , __int64 position ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int64Thunk';fcns.name{fcnNum}='CPhidgetStepper_setCurrentPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int64'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getPositionMax ( CPhidgetStepperHandle phid , int index , __int64 * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getPositionMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int64Ptr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getPositionMin ( CPhidgetStepperHandle phid , int index , __int64 * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getPositionMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int64Ptr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getCurrentLimit ( CPhidgetStepperHandle phid , int index , double * limit ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getCurrentLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_setCurrentLimit ( CPhidgetStepperHandle phid , int index , double limit ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetStepper_setCurrentLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getCurrent ( CPhidgetStepperHandle phid , int index , double * current ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getCurrentMax ( CPhidgetStepperHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getCurrentMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getCurrentMin ( CPhidgetStepperHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getCurrentMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getEngaged ( CPhidgetStepperHandle phid , int index , int * engagedState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getEngaged'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetStepper_setEngaged ( CPhidgetStepperHandle phid , int index , int engagedState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='CPhidgetStepper_setEngaged'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetStepper_getStopped ( CPhidgetStepperHandle phid , int index , int * stoppedState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetStepper_getStopped'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_create ( CPhidgetTemperatureSensorHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_getTemperatureInputCount ( CPhidgetTemperatureSensorHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_getTemperatureInputCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_getTemperature ( CPhidgetTemperatureSensorHandle phid , int index , double * temperature ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_getTemperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_getTemperatureMax ( CPhidgetTemperatureSensorHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_getTemperatureMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_getTemperatureMin ( CPhidgetTemperatureSensorHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_getTemperatureMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_getTemperatureChangeTrigger ( CPhidgetTemperatureSensorHandle phid , int index , double * trigger ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_getTemperatureChangeTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_setTemperatureChangeTrigger ( CPhidgetTemperatureSensorHandle phid , int index , double trigger ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_setTemperatureChangeTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'double'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_getPotential ( CPhidgetTemperatureSensorHandle phid , int index , double * potential ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_getPotential'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_getPotentialMax ( CPhidgetTemperatureSensorHandle phid , int index , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_getPotentialMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_getPotentialMin ( CPhidgetTemperatureSensorHandle phid , int index , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_getPotentialMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_getAmbientTemperature ( CPhidgetTemperatureSensorHandle phid , double * ambient ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_getAmbientTemperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_getAmbientTemperatureMax ( CPhidgetTemperatureSensorHandle phid , double * max ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_getAmbientTemperatureMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_getAmbientTemperatureMin ( CPhidgetTemperatureSensorHandle phid , double * min ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_getAmbientTemperatureMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_getThermocoupleType ( CPhidgetTemperatureSensorHandle phid , int index , CPhidgetTemperatureSensor_ThermocoupleType * type ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_getThermocoupleType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'CPhidgetTemperatureSensor_ThermocoupleTypePtr'};fcnNum=fcnNum+1;
% int CPhidgetTemperatureSensor_setThermocoupleType ( CPhidgetTemperatureSensorHandle phid , int index , CPhidgetTemperatureSensor_ThermocoupleType type ); 
fcns.thunkname{fcnNum}='int32voidPtrint32CPhidgetTemperatureSensor_ThermocoupleTypeThunk';fcns.name{fcnNum}='CPhidgetTemperatureSensor_setThermocoupleType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'CPhidgetTemperatureSensor_ThermocoupleType'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_create ( CPhidgetTextLCDHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLCD_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_getRowCount ( CPhidgetTextLCDHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLCD_getRowCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_getColumnCount ( CPhidgetTextLCDHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLCD_getColumnCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_getBacklight ( CPhidgetTextLCDHandle phid , int * backlightState ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLCD_getBacklight'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_setBacklight ( CPhidgetTextLCDHandle phid , int backlightState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetTextLCD_setBacklight'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_getBrightness ( CPhidgetTextLCDHandle phid , int * brightness ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLCD_getBrightness'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_setBrightness ( CPhidgetTextLCDHandle phid , int brightness ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetTextLCD_setBrightness'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_getContrast ( CPhidgetTextLCDHandle phid , int * contrast ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLCD_getContrast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_setContrast ( CPhidgetTextLCDHandle phid , int contrast ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetTextLCD_setContrast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_getCursorOn ( CPhidgetTextLCDHandle phid , int * cursorState ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLCD_getCursorOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_setCursorOn ( CPhidgetTextLCDHandle phid , int cursorState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetTextLCD_setCursorOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_getCursorBlink ( CPhidgetTextLCDHandle phid , int * cursorBlinkState ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLCD_getCursorBlink'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_setCursorBlink ( CPhidgetTextLCDHandle phid , int cursorBlinkState ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetTextLCD_setCursorBlink'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_setCustomCharacter ( CPhidgetTextLCDHandle phid , int index , int var1 , int var2 ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32Thunk';fcns.name{fcnNum}='CPhidgetTextLCD_setCustomCharacter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_setDisplayCharacter ( CPhidgetTextLCDHandle phid , int index , int column , unsigned char character ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32uint8Thunk';fcns.name{fcnNum}='CPhidgetTextLCD_setDisplayCharacter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32', 'uint8'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_setDisplayString ( CPhidgetTextLCDHandle phid , int index , char * displayString ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringThunk';fcns.name{fcnNum}='CPhidgetTextLCD_setDisplayString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_getScreenCount ( CPhidgetTextLCDHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLCD_getScreenCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_getScreen ( CPhidgetTextLCDHandle phid , int * screenIndex ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLCD_getScreen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_setScreen ( CPhidgetTextLCDHandle phid , int screenIndex ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetTextLCD_setScreen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_getScreenSize ( CPhidgetTextLCDHandle phid , CPhidgetTextLCD_ScreenSize * screenSize ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLCD_getScreenSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'CPhidgetTextLCD_ScreenSizePtr'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_setScreenSize ( CPhidgetTextLCDHandle phid , CPhidgetTextLCD_ScreenSize screenSize ); 
fcns.thunkname{fcnNum}='int32voidPtrCPhidgetTextLCD_ScreenSizeThunk';fcns.name{fcnNum}='CPhidgetTextLCD_setScreenSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'CPhidgetTextLCD_ScreenSize'};fcnNum=fcnNum+1;
% int CPhidgetTextLCD_initialize ( CPhidgetTextLCDHandle phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLCD_initialize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTextLED_create ( CPhidgetTextLEDHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLED_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetTextLED_getRowCount ( CPhidgetTextLEDHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLED_getRowCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTextLED_getColumnCount ( CPhidgetTextLEDHandle phid , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLED_getColumnCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTextLED_getBrightness ( CPhidgetTextLEDHandle phid , int * brightness ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetTextLED_getBrightness'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int CPhidgetTextLED_setBrightness ( CPhidgetTextLEDHandle phid , int brightness ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CPhidgetTextLED_setBrightness'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int CPhidgetTextLED_setDisplayString ( CPhidgetTextLEDHandle phid , int index , char * displayString ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringThunk';fcns.name{fcnNum}='CPhidgetTextLED_setDisplayString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int CPhidgetWeightSensor_create ( CPhidgetWeightSensorHandle * phid ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CPhidgetWeightSensor_create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
% int CPhidgetWeightSensor_getWeight ( CPhidgetWeightSensorHandle phid , double * weight ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetWeightSensor_getWeight'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetWeightSensor_getWeightChangeTrigger ( CPhidgetWeightSensorHandle phid , double * trigger ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CPhidgetWeightSensor_getWeightChangeTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int CPhidgetWeightSensor_setWeightChangeTrigger ( CPhidgetWeightSensorHandle phid , double trigger ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='CPhidgetWeightSensor_setWeightChangeTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'double'};fcnNum=fcnNum+1;
structs.s_CPhidget_Timestamp.members=struct('seconds', 'int32', 'microseconds', 'int32');
structs.s_CPhidgetIR_CodeInfo.members=struct('bitCount', 'int32', 'encoding', 'CPhidgetIR_Encoding', 'length', 'CPhidgetIR_Length', 'gap', 'int32', 'trail', 'int32', 'header', 'int32#2', 'one', 'int32#2', 'zero', 'int32#2', 'repeat', 'int32#26', 'min_repeat', 'int32', 'toggle_mask', 'uint8#16', 'carrierFrequency', 'int32', 'dutyCycle', 'int32');
structs.s_CPhidgetSpatial_SpatialEventData.members=struct('acceleration', 'double#3', 'angularRate', 'double#3', 'magneticField', 'double#3', 'timestamp', 's_CPhidget_Timestamp');
enuminfo.CPhidgetDictionary_keyChangeReason=struct('PHIDGET_DICTIONARY_VALUE_CHANGED',1,'PHIDGET_DICTIONARY_ENTRY_ADDED',2,'PHIDGET_DICTIONARY_ENTRY_REMOVING',3,'PHIDGET_DICTIONARY_CURRENT_VALUE',4);
enuminfo.CPhidgetIR_Encoding=struct('PHIDGET_IR_ENCODING_UNKNOWN',1,'PHIDGET_IR_ENCODING_SPACE',2,'PHIDGET_IR_ENCODING_PULSE',3,'PHIDGET_IR_ENCODING_BIPHASE',4,'PHIDGET_IR_ENCODING_RC5',5,'PHIDGET_IR_ENCODING_RC6',6);
enuminfo.CPhidgetTemperatureSensor_ThermocoupleType=struct('PHIDGET_TEMPERATURE_SENSOR_K_TYPE',1,'PHIDGET_TEMPERATURE_SENSOR_J_TYPE',2,'PHIDGET_TEMPERATURE_SENSOR_E_TYPE',3,'PHIDGET_TEMPERATURE_SENSOR_T_TYPE',4);
enuminfo.CPhidgetLED_Voltage=struct('PHIDGET_LED_VOLTAGE_1_7V',1,'PHIDGET_LED_VOLTAGE_2_75V',2,'PHIDGET_LED_VOLTAGE_3_9V',3,'PHIDGET_LED_VOLTAGE_5_0V',4);
enuminfo.CPhidget_DeviceUID=struct('PHIDUID_NOTHING',1,'PHIDUID_ACCELEROMETER_2AXIS_2G',2,'PHIDUID_ACCELEROMETER_2AXIS_10G',3,'PHIDUID_ACCELEROMETER_2AXIS_5G',4,'PHIDUID_ACCELEROMETER_3AXIS_3G',5,'PHIDUID_ADVANCEDSERVO_1MOTOR',6,'PHIDUID_ADVANCEDSERVO_8MOTOR',7,'PHIDUID_ADVANCEDSERVO_8MOTOR_PGOOD_FLAG',8,'PHIDUID_ADVANCEDSERVO_8MOTOR_CURSENSE_FIX',9,'PHIDUID_ANALOG_4OUTPUT',10,'PHIDUID_BRIDGE_4INPUT_GAINBUG',11,'PHIDUID_BRIDGE_4INPUT',12,'PHIDUID_ENCODER_1ENCODER_1INPUT_OLD',13,'PHIDUID_ENCODER_1ENCODER_1INPUT_v1',14,'PHIDUID_ENCODER_1ENCODER_1INPUT_v2',15,'PHIDUID_ENCODER_HS_1ENCODER',16,'PHIDUID_ENCODER_HS_4ENCODER_4INPUT',17,'PHIDUID_FREQUENCYCOUNTER_2INPUT',18,'PHIDUID_GPS',19,'PHIDUID_INTERFACEKIT_0_0_4_NO_ECHO',20,'PHIDUID_INTERFACEKIT_0_0_4',21,'PHIDUID_INTERFACEKIT_0_0_8',22,'PHIDUID_INTERFACEKIT_0_5_7',23,'PHIDUID_INTERFACEKIT_0_8_8_w_LCD',24,'PHIDUID_INTERFACEKIT_0_16_16_NO_ECHO',25,'PHIDUID_INTERFACEKIT_0_16_16_BITBUG',26,'PHIDUID_INTERFACEKIT_0_16_16',27,'PHIDUID_INTERFACEKIT_2_2_2',28,'PHIDUID_INTERFACEKIT_2_8_8',29,'PHIDUID_INTERFACEKIT_4_8_8',30,'PHIDUID_INTERFACEKIT_8_8_8_NO_ECHO',31,'PHIDUID_INTERFACEKIT_8_8_8',32,'PHIDUID_INTERFACEKIT_8_8_8_FAST',33,'PHIDUID_INTERFACEKIT_8_8_8_w_LCD_NO_ECHO',34,'PHIDUID_INTERFACEKIT_8_8_8_w_LCD',35,'PHIDUID_INTERFACEKIT_8_8_8_w_LCD_FAST',36,'PHIDUID_INTERFACEKIT_TOUCH_SLIDER',37,'PHIDUID_INTERFACEKIT_TOUCH_ROTARY',38,'PHIDUID_IR',39,'PHIDUID_LED_64',40,'PHIDUID_LED_64_ADV',41,'PHIDUID_LED_64_ADV_M3',42,'PHIDUID_MOTORCONTROL_1MOTOR',43,'PHIDUID_MOTORCONTROL_HC_2MOTOR',44,'PHIDUID_MOTORCONTROL_LV_2MOTOR_4INPUT',45,'PHIDUID_PHSENSOR',46,'PHIDUID_RFID_OLD',47,'PHIDUID_RFID',48,'PHIDUID_RFID_2OUTPUT_NO_ECHO',49,'PHIDUID_RFID_2OUTPUT',50,'PHIDUID_RFID_2OUTPUT_READ_WRITE',51,'PHIDUID_SERVO_1MOTOR_OLD',52,'PHIDUID_SERVO_4MOTOR_OLD',53,'PHIDUID_SERVO_1MOTOR_NO_ECHO',54,'PHIDUID_SERVO_1MOTOR',55,'PHIDUID_SERVO_4MOTOR_NO_ECHO',56,'PHIDUID_SERVO_4MOTOR',57,'PHIDUID_SPATIAL_ACCEL_3AXIS_1049',58,'PHIDUID_SPATIAL_ACCEL_3AXIS_1041',59,'PHIDUID_SPATIAL_ACCEL_3AXIS_1043',60,'PHIDUID_SPATIAL_ACCEL_GYRO_COMPASS_1056',61,'PHIDUID_SPATIAL_ACCEL_GYRO_COMPASS_1056_NEG_GAIN',62,'PHIDUID_SPATIAL_ACCEL_GYRO_COMPASS_1042',63,'PHIDUID_SPATIAL_ACCEL_GYRO_COMPASS_1044',64,'PHIDUID_STEPPER_BIPOLAR_1MOTOR',65,'PHIDUID_STEPPER_BIPOLAR_1MOTOR_M3',66,'PHIDUID_STEPPER_UNIPOLAR_4MOTOR',67,'PHIDUID_TEMPERATURESENSOR_OLD',68,'PHIDUID_TEMPERATURESENSOR',69,'PHIDUID_TEMPERATURESENSOR_AD22100',70,'PHIDUID_TEMPERATURESENSOR_TERMINAL_BLOCKS',71,'PHIDUID_TEMPERATURESENSOR_4',72,'PHIDUID_TEMPERATURESENSOR_IR',73,'PHIDUID_TEXTLCD_2x20',74,'PHIDUID_TEXTLCD_2x20_w_8_8_8',75,'PHIDUID_TEXTLCD_2x20_w_8_8_8_BRIGHTNESS',76,'PHIDUID_TEXTLCD_ADAPTER',77,'PHIDUID_TEXTLED_1x8',78,'PHIDUID_TEXTLED_4x8',79,'PHIDUID_WEIGHTSENSOR',80,'PHIDUID_GENERIC',81,'PHIDUID_FIRMWARE_UPGRADE',82);
enuminfo.CPhidgetFrequencyCounter_FilterType=struct('PHIDGET_FREQUENCYCOUNTER_FILTERTYPE_ZERO_CROSSING',1,'PHIDGET_FREQUENCYCOUNTER_FILTERTYPE_LOGIC_LEVEL',2,'PHIDGET_FREQUENCYCOUNTER_FILTERTYPE_UNKNOWN',3);
enuminfo.CPhidget_DeviceID=struct('PHIDID_ACCELEROMETER_3AXIS',126,'PHIDID_ADVANCEDSERVO_1MOTOR',130,'PHIDID_ADVANCEDSERVO_8MOTOR',58,'PHIDID_ANALOG_4OUTPUT',55,'PHIDID_BIPOLAR_STEPPER_1MOTOR',123,'PHIDID_BRIDGE_4INPUT',59,'PHIDID_ENCODER_1ENCODER_1INPUT',75,'PHIDID_ENCODER_HS_1ENCODER',128,'PHIDID_ENCODER_HS_4ENCODER_4INPUT',79,'PHIDID_FREQUENCYCOUNTER_2INPUT',53,'PHIDID_GPS',121,'PHIDID_INTERFACEKIT_0_0_4',64,'PHIDID_INTERFACEKIT_0_0_8',129,'PHIDID_INTERFACEKIT_0_16_16',68,'PHIDID_INTERFACEKIT_2_2_2',54,'PHIDID_INTERFACEKIT_8_8_8',69,'PHIDID_INTERFACEKIT_8_8_8_w_LCD',125,'PHIDID_IR',77,'PHIDID_LED_64_ADV',76,'PHIDID_LINEAR_TOUCH',118,'PHIDID_MOTORCONTROL_1MOTOR',62,'PHIDID_MOTORCONTROL_HC_2MOTOR',89,'PHIDID_RFID_2OUTPUT',49,'PHIDID_RFID_2OUTPUT_READ_WRITE',52,'PHIDID_ROTARY_TOUCH',119,'PHIDID_SPATIAL_ACCEL_3AXIS',127,'PHIDID_SPATIAL_ACCEL_GYRO_COMPASS',51,'PHIDID_TEMPERATURESENSOR',112,'PHIDID_TEMPERATURESENSOR_4',50,'PHIDID_TEMPERATURESENSOR_IR',60,'PHIDID_TEXTLCD_2x20_w_8_8_8',381,'PHIDID_TEXTLCD_ADAPTER',61,'PHIDID_UNIPOLAR_STEPPER_4MOTOR',122,'PHIDID_ACCELEROMETER_2AXIS',113,'PHIDID_INTERFACEKIT_0_8_8_w_LCD',83,'PHIDID_INTERFACEKIT_4_8_8',4,'PHIDID_LED_64',74,'PHIDID_MOTORCONTROL_LV_2MOTOR_4INPUT',88,'PHIDID_PHSENSOR',116,'PHIDID_RFID',48,'PHIDID_SERVO_1MOTOR',57,'PHIDID_SERVO_1MOTOR_OLD',2,'PHIDID_SERVO_4MOTOR',56,'PHIDID_SERVO_4MOTOR_OLD',3,'PHIDID_TEXTLCD_2x20',82,'PHIDID_TEXTLCD_2x20_w_0_8_8',339,'PHIDID_TEXTLED_1x8',73,'PHIDID_TEXTLED_4x8',72,'PHIDID_WEIGHTSENSOR',114,'PHIDID_FIRMWARE_UPGRADE',152);
enuminfo.CPhidgetRFID_Protocol=struct('PHIDGET_RFID_PROTOCOL_EM4100',1,'PHIDGET_RFID_PROTOCOL_ISO11785_FDX_B',2,'PHIDGET_RFID_PROTOCOL_PHIDGETS',3);
enuminfo.CPhidgetBridge_Gain=struct('PHIDGET_BRIDGE_GAIN_1',1,'PHIDGET_BRIDGE_GAIN_8',2,'PHIDGET_BRIDGE_GAIN_16',3,'PHIDGET_BRIDGE_GAIN_32',4,'PHIDGET_BRIDGE_GAIN_64',5,'PHIDGET_BRIDGE_GAIN_128',6,'PHIDGET_BRIDGE_GAIN_UNKNOWN',7);
enuminfo.CPhidgetLED_CurrentLimit=struct('PHIDGET_LED_CURRENT_LIMIT_20mA',1,'PHIDGET_LED_CURRENT_LIMIT_40mA',2,'PHIDGET_LED_CURRENT_LIMIT_60mA',3,'PHIDGET_LED_CURRENT_LIMIT_80mA',4);
enuminfo.CPhidget_DeviceClass=struct('PHIDCLASS_ACCELEROMETER',2,'PHIDCLASS_ADVANCEDSERVO',3,'PHIDCLASS_ANALOG',22,'PHIDCLASS_BRIDGE',23,'PHIDCLASS_ENCODER',4,'PHIDCLASS_FREQUENCYCOUNTER',21,'PHIDCLASS_GPS',5,'PHIDCLASS_INTERFACEKIT',7,'PHIDCLASS_IR',19,'PHIDCLASS_LED',8,'PHIDCLASS_MOTORCONTROL',9,'PHIDCLASS_PHSENSOR',10,'PHIDCLASS_RFID',11,'PHIDCLASS_SERVO',12,'PHIDCLASS_SPATIAL',20,'PHIDCLASS_STEPPER',13,'PHIDCLASS_TEMPERATURESENSOR',14,'PHIDCLASS_TEXTLCD',15,'PHIDCLASS_TEXTLED',16,'PHIDCLASS_WEIGHTSENSOR',17);
enuminfo.CPhidgetIR_Length=struct('PHIDGET_IR_LENGTH_UNKNOWN',1,'PHIDGET_IR_LENGTH_CONSTANT',2,'PHIDGET_IR_LENGTH_VARIABLE',3);
enuminfo.CPhidgetLog_level=struct('PHIDGET_LOG_CRITICAL',1,'PHIDGET_LOG_ERROR',2,'PHIDGET_LOG_WARNING',3,'PHIDGET_LOG_DEBUG',4,'PHIDGET_LOG_INFO',5,'PHIDGET_LOG_VERBOSE',6);
enuminfo.CPhidget_ServoType=struct('PHIDGET_SERVO_DEFAULT',1,'PHIDGET_SERVO_RAW_us_MODE',2,'PHIDGET_SERVO_HITEC_HS322HD',3,'PHIDGET_SERVO_HITEC_HS5245MG',4,'PHIDGET_SERVO_HITEC_805BB',5,'PHIDGET_SERVO_HITEC_HS422',6,'PHIDGET_SERVO_TOWERPRO_MG90',7,'PHIDGET_SERVO_HITEC_HSR1425CR',8,'PHIDGET_SERVO_HITEC_HS785HB',9,'PHIDGET_SERVO_HITEC_HS485HB',10,'PHIDGET_SERVO_HITEC_HS645MG',11,'PHIDGET_SERVO_HITEC_815BB',12,'PHIDGET_SERVO_FIRGELLI_L12_30_50_06_R',13,'PHIDGET_SERVO_FIRGELLI_L12_50_100_06_R',14,'PHIDGET_SERVO_FIRGELLI_L12_50_210_06_R',15,'PHIDGET_SERVO_FIRGELLI_L12_100_50_06_R',16,'PHIDGET_SERVO_FIRGELLI_L12_100_100_06_R',17,'PHIDGET_SERVO_SPRINGRC_SM_S2313M',18,'PHIDGET_SERVO_SPRINGRC_SM_S3317M',19,'PHIDGET_SERVO_SPRINGRC_SM_S3317SR',20,'PHIDGET_SERVO_SPRINGRC_SM_S4303R',21,'PHIDGET_SERVO_SPRINGRC_SM_S4315M',22,'PHIDGET_SERVO_SPRINGRC_SM_S4315R',23,'PHIDGET_SERVO_SPRINGRC_SM_S4505B',24,'PHIDGET_SERVO_USER_DEFINED',25);
enuminfo.CPhidgetTextLCD_ScreenSize=struct('PHIDGET_TEXTLCD_SCREEN_NONE',1,'PHIDGET_TEXTLCD_SCREEN_1x8',2,'PHIDGET_TEXTLCD_SCREEN_2x8',3,'PHIDGET_TEXTLCD_SCREEN_1x16',4,'PHIDGET_TEXTLCD_SCREEN_2x16',5,'PHIDGET_TEXTLCD_SCREEN_4x16',6,'PHIDGET_TEXTLCD_SCREEN_2x20',7,'PHIDGET_TEXTLCD_SCREEN_4x20',8,'PHIDGET_TEXTLCD_SCREEN_2x24',9,'PHIDGET_TEXTLCD_SCREEN_1x40',10,'PHIDGET_TEXTLCD_SCREEN_2x40',11,'PHIDGET_TEXTLCD_SCREEN_4x40',12,'PHIDGET_TEXTLCD_SCREEN_UNKNOWN',13);
methodinfo=fcns;